<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-02-04T13:43:16+11:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Emily Lewis Dando</title><subtitle>Give me a job. 
</subtitle><author><name>&lt;firstname&gt; &lt;lastname&gt;</name><email>&lt;mail@domain.tld&gt;</email></author><entry><title type="html">Shell Cheatsheet</title><link href="http://localhost:4000/blog/2025-01-10-unix-cheatsheet/" rel="alternate" type="text/html" title="Shell Cheatsheet" /><published>2025-01-10T00:00:00+11:00</published><updated>2025-02-04T13:12:34+11:00</updated><id>http://localhost:4000/blog/unix-cheatsheet</id><content type="html" xml:base="http://localhost:4000/blog/2025-01-10-unix-cheatsheet/"><![CDATA[<h6 id="print-statements">print statements</h6>
<pre><code class="language-run-shell">echo (-n: don't print newline) "message" #prints message
</code></pre>
<h6 id="filtering">filtering</h6>
<pre><code class="language-run-shell">grep (-v: select everything not including the following) (-E extended regex) (-o: print all occurences of matching pattern) (-c count number of lines matching) [pattern] [filename] #filters [filename] for [pattern]
</code></pre>
<pre><code class="language-run-shell">#grep and strings
right=hello
wrong=bye
echo $right | grep -E "^h"
echo $wrong | grep -E "^h" #won't print if it does not match the condition
</code></pre>
<h6 id="word-counts">word counts</h6>
<pre><code class="language-run-shell">wc (-n: omit newline) (-c: bytecount) (-l: count lines) (-m: count chars) [file/string] #counts (byte/lines/chars/etc) of [file/string]
</code></pre>
<h6 id="sorting">sorting</h6>
<pre><code class="language-run-shell">sort (-n: sort by numerical) (-r: desc) 
head (-5) [file] #print first 5 lines
tail (-5) [file] #print last 5 lines
</code></pre>
<h6 id="user-input">user input</h6>
<pre><code class="language-run-shell">read (-p: add message) "message" [variable_name] #saves user response to "message" to [variable_name]
echo $variable_name
</code></pre>
<h6 id="arithmetic">arithmetic</h6>
<pre><code class="language-run-shell">#base shell
expr \( 4 + 2 - 3 \) \* 5 
echo "$(expr \( 4 + 2 - 3 \) \* 5)" #prints it

declare (-i: integer type) (-r: readonly) [variable_name]=4 #set integer type variable - try to set it to string later and it will be set to 0

answer=`expr 5 + 5` #command substitution - set variable to product of commands
</code></pre>
<pre><code class="language-run-shell">#bash specific
answer=$(( (4+2-3)*5 )) #math operations
echo $answer
</code></pre>
<h6 id="regex">regex</h6>
<pre><code class="language-run-shell">#basic conditions
grep (-E: doesn't require backslashes) "^ex|er$" [filename] #begins with ex OR ends with er

grep -E "^[Ff][0-9]" [filename] #starts with F or F then anything from 0-9 (e.g F9, f5)

grep -E -v "[[:digit:]][[:punct:]]" [filename] #doesnt include digit/punctuation

[[:alpha:]] #any uppercase or lowercase english letter
[[:upper:]] #lowercase english letters
[[:digit:]] #0-9
[[:alnum:]] #alpha or digit
[[:xdigit:]] # digit or upper/lower [a:f]
[[:punct:]] #punctutation
. # any character
"e$" #end in e
"^e" #start with e
</code></pre>

<h6 id="working-with-csv">working with csv</h6>

<pre><code class="language-run-shell">cut (-d - delimiter) , (-f - select certain fields) 3-4 #cut out the 3rd and 4th field separated by commas

#returns unique values - NOTE: must sort before passing into the command
uniq (-c: returns distinct values + number of occurences)
uniq myfile # will take the first value if there are multiple
</code></pre>]]></content><author><name>&lt;firstname&gt; &lt;lastname&gt;</name><email>&lt;mail@domain.tld&gt;</email></author><category term="blog" /><summary type="html"><![CDATA[A quick reference sheet for the basics of unix shell!]]></summary></entry></feed>